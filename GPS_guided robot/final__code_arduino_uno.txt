#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <HMC5883L.h>
#include <Servo.h> 
HMC5883L compass;
///############################### Code for arduino#################################
static const int RXPin = 4, TXPin = 3;
static const uint32_t GPSBaud = 9600;

// The TinyGPS++ object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);
int servoPin = 3; 
int gps_led=12;
int  Pin_right_forward  =8 ;//lpwm
int Pin_right_backward  =9 ;//rpwm
int  Pin_left_forward  =10 ;//lpwm
int Pin_left_backward  =11 ;//rpwm
 float f1, f2,gpsheading,La1,La2,Long1,Long2,received_La1,received_Long1,headingDegrees,dis_lat,dis_long;
 const int maxWaypoints = 5; // Maximum number of waypoints to store
float waypointsLat[maxWaypoints];
float waypointsLong[maxWaypoints];
int waypointCount = 0; // To keep track of the number of waypoints stored
int distance_count=0;
 int count=0;
 Servo Servo1; 


void setup(){
  ss.begin(GPSBaud);
  Serial.begin(9600);
  while(!Serial);
  Serial.println("Programm start");
   pinMode(gps_led, OUTPUT);
    pinMode(Pin_right_forward, OUTPUT);
  pinMode(Pin_right_backward , OUTPUT);
    pinMode(Pin_left_forward, OUTPUT);
  pinMode(Pin_left_backward , OUTPUT);
   Servo1.attach(servoPin);
   /////////////////////////////////// compass sensor -------------------
    
  // Initialize Initialize HMC5883L
  Serial.println("Initialize HMC5883L");
  while (!compass.begin())
  {
    Serial.println("Could not find a valid HMC5883L sensor, check wiring!");
    delay(500);
  }

  // Set measurement range
  compass.setRange(HMC5883L_RANGE_1_3GA);
  // Set measurement mode
  compass.setMeasurementMode(HMC5883L_CONTINOUS);
  // Set data rate
  compass.setDataRate(HMC5883L_DATARATE_30HZ);
  // Set number of samples averaged
  compass.setSamples(HMC5883L_SAMPLES_8);
  // Set calibration offset. See HMC5883L_calibration.ino
  compass.setOffset(-30, -309, -297);
  //------------------------------------------- end of compass-----------------
}
void parse_floats( String str, float* f1, float* f2) {
    int i = 0;
    float num = 0.00000000000, decimal = 0.0, sign = 1.00000000000;
    while (str[i] != '\0') {
        if (str[i] == '-') {
            sign = -1.00000000000;
        }
        else if (str[i] == '.') {
            decimal = 1.00000000000;
        }
        else if (str[i] >= '0' && str[i] <= '9') {
            if (decimal) {
                num = num + (str[i] - '0') / (10.000000000000 * decimal);
                decimal *= 10.000000000000;
            }
            else {
                num = num * 10.000000000000 + (str[i] - '0');
            }
        }
        else if (str[i] == ',') {
            *f1 = num * sign;
            sign = 1.000000000000;
            num = 0.000000000000;
            decimal = 0.000000000000;
        }
        i++;
    }
    *f2 = num * sign;
}
void loop()
{
   while(ss.available() > 0){
    gps.encode(ss.read());
    if (gps.location.isUpdated()){
      digitalWrite(gps_led,HIGH);
      received_La1=(gps.location.lat());
      received_Long1=(gps.location.lng());
      La1= received_La1;
      Long1=received_Long1;

      Serial.print("Latitude= "); 
      Serial.print(La1, 6);
      Serial.print(" Longitude= "); 
      Serial.println(Long1, 6);
   ///@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ SERIAL @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
if(Serial.available()){
  Serial.println("Serial is avilable");
 String one=Serial.readString();
 Serial.println(one);

   String input = one;
    parse_floats(input, &f1, &f2);
    // FF1=f1;
    // FF2=f2;
    
  Serial.print("Receiving latitude:=");
  Serial.print(f1,6);
  Serial.print("Receiving longitude:=");
  Serial.println(f2,6);

 waypointCount+=1;
 Serial.print("Count:");
 Serial.println(count);
 count+=1;
      waypointsLat[waypointCount-1]=f1;
      waypointsLong[waypointCount-1]=f2;
  
 }
///----------------------------  end of seral communcation-----

      compass_sensor();
 
    }
  }/// end of gps
  digitalWrite(gps_led,LOW);
  motor_stop();







}//////////////// end of loop
void compass_sensor()

{
  ///--------------------------------------- compass sensor---------
  Vector norm = compass.readNormalize();

  // Calculate heading
  float heading = atan2(norm.YAxis, norm.XAxis);

  // Set declination angle on your location and fix heading
  // You can find your declination on: http://magnetic-declination.com/
  // (+) Positive or (-) for negative
  // For Bytom / Poland declination angle is 4'26E (positive)
  // Formula: (deg + (min / 60.0)) / (180 / M_PI);
  float declinationAngle = (4.0 + (26.0 / 60.0)) / (180 / M_PI);
  heading += declinationAngle;

  // Correct for heading < 0deg and heading > 360deg
  if (heading < 0)
  {
    heading += 2 * PI;
  }

  if (heading > 2 * PI)
  {
    heading -= 2 * PI;
  }

  // Convert to degrees
  float headingDegrees = heading * 180/M_PI; 

      // La1= 23.64275201889645;
      // Long1=90.47373715144009;
      La2=waypointsLat[distance_count-1];
      Long2=waypointsLong[distance_count-1];

      gpsheading = atan2(sin(Long2-Long1)*cos(La2) , cos(La1)*sin(La2)- sin(La1)*cos(La2)*cos(Long2-Long1));
      gpsheading = gpsheading*180/3.1415926536;

      if (gpsheading<0)
      {
       gpsheading = ((gpsheading+360)); // If heading is negative make it positive
      }
      Serial.print("gps heading:");
      Serial.println(gpsheading);


              //=============Distance================================ 
       
        float dist_calc=0;
        float dist_calc2=0;
        float Int_Dist=0;
        float Final_Dist=0;
        dis_lat=radians(La2-La1);
        dis_long=radians(Long2-Long1);

        dist_calc = (sin(dis_lat/2)*sin(dis_lat/2));
        dist_calc2 = (cos(La1)*cos(La2)*sin(dis_long/2)*sin(dis_long/2));
        Int_Dist = dist_calc + dist_calc2;
        Final_Dist = (2*atan2(sqrt(Int_Dist),sqrt(1-Int_Dist)));
        Final_Dist = Final_Dist*6371000; // distance is in meters
        // distance.meter = Final_Dist;
        Serial.print("Distance:");
        Serial.println(Final_Dist);
        if(Final_Dist<0.3)
        {
          distance_count+=1;
          if(distance_count==count)
          {
            motor_stop();
            Servo1.write(90); 
          }
          else{
            Servo1.write(180); 
          }
        }
        // if(distance.meter<5)
        // {
        // if(waycont==waypoints)
        // {
        // Stop();
        // }
        // waycont+=1;
        // }




  // Output
  // Serial.print(" Serial communcationa = ");
  // Serial.print(f1);
  // Serial.print(" Heading = ");
  // Serial.print(heading);
  Serial.print(" compass heading Degress = ");
  Serial.print(headingDegrees);
  // Serial.println();
////------------------------ end of compass 
   
  // digitalWrite(Pin_right_forward, HIGH);
  // digitalWrite(Pin_right_backward, LOW);
  
  //   digitalWrite(Pin_left_forward, HIGH);
  // digitalWrite(Pin_left_backward, LOW);
  // delay(10);
  // motor_stop();
  // delay(200);
    ////////////// -------------conditional movement -----------------
  float different=headingDegrees-gpsheading;
if(different<0)
{
  different = abs(different);
}
else{
  different = different;
}
  if(headingDegrees > gpsheading && different>10.0)
  { 

    Serial.print("from motor compass:");
    Serial.println(headingDegrees);
        Serial.print("from motor gpsheading:");
    Serial.println(gpsheading);
    Serial.println("Right  motor moving");
    digitalWrite(Pin_right_forward, HIGH);
    digitalWrite(Pin_right_backward, LOW);
    delay(70);
    motor_stop();
    delay(5);
  }
  else if(headingDegrees < gpsheading && different>10.0)
  {
    Serial.println("Left  motor moving");
        digitalWrite(Pin_left_forward, HIGH);
  digitalWrite(Pin_left_backward, LOW);
      delay(70);
    motor_stop();
    delay(5);
  }
  else if(different<10.0)
  {
    digitalWrite(Pin_left_forward, HIGH);
    digitalWrite(Pin_right_forward, HIGH);
    delay(70);
    motor_stop();
    delay(5);
  }
  else{
    motor_stop();
  }

////------------------  end of conditional moveent---------------

}

void motor_stop()
{
    digitalWrite(Pin_right_forward, LOW);
  digitalWrite(Pin_right_backward, LOW);
      digitalWrite(Pin_left_forward, LOW);
  digitalWrite(Pin_left_backward, LOW);
}
